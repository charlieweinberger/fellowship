"use strict";(self.webpackChunkfellowship=self.webpackChunkfellowship||[]).push([[950],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,m=c["".concat(l,".").concat(d)]||c[d]||h[d]||i;return a?n.createElement(m,o(o({ref:t},u),{},{components:a})):n.createElement(m,o({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3322:function(e,t,a){a.d(t,{Z:function(){return r}});var n=a(7294);function r(e){var t=e.src;return n.createElement("div",{style:{width:"560px",maxWidth:"100%"}},n.createElement("iframe",{width:"100%",height:"315",src:t,title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:"true"}))}},206:function(e,t,a){a.r(t),a.d(t,{assets:function(){return h},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),o=a(3322),s=["components"],l={sidebar_position:8,sidebar_label:"Unit 8: APIs"},p="Unit 8: APIs",u={unversionedId:"unit8",id:"unit8",title:"Unit 8: APIs",description:"Welcome to Unit 8",source:"@site/docs/unit8.mdx",sourceDirName:".",slug:"/unit8",permalink:"/course/unit8",editUrl:"https://github.com/icssc/fellowship/tree/main/docs/unit8.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,sidebar_label:"Unit 8: APIs"},sidebar:"tutorialSidebar",previous:{title:"Unit 7: React",permalink:"/course/unit7"},next:{title:"Unit 9: TypeScript",permalink:"/course/unit9"}},h={},c=[{value:"Welcome to Unit 8",id:"welcome-to-unit-8",level:2},{value:"Unit 8 Lecture Video",id:"unit-8-lecture-video",level:2},{value:"What is an API?",id:"what-is-an-api",level:2},{value:"REST API",id:"rest-api",level:2},{value:"HTTP Methods",id:"http-methods",level:3},{value:"An Example",id:"an-example",level:3},{value:"HTTP Status Codes",id:"http-status-codes",level:3},{value:"URL Encoding",id:"url-encoding",level:3},{value:"Fetch",id:"fetch",level:3},{value:"GraphQL",id:"graphql",level:2},{value:"What is GraphQL?",id:"what-is-graphql",level:3},{value:"Why GraphQL?",id:"why-graphql",level:3},{value:"What&#39;s the problem with the REST approach?",id:"whats-the-problem-with-the-rest-approach",level:4},{value:"Scalability",id:"scalability",level:3},{value:"Don&#39;t get more data than you need",id:"dont-get-more-data-than-you-need",level:4},{value:"Simplified usage",id:"simplified-usage",level:4},{value:"How to use GraphQL",id:"how-to-use-graphql",level:3},{value:"PeterPortal API",id:"peterportal-api",level:2},{value:"Assignment",id:"assignment",level:2},{value:"Submission",id:"submission",level:3}],d={toc:c};function m(e){var t=e.components,l=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"unit-8-apis"},"Unit 8: APIs"),(0,i.kt)("h2",{id:"welcome-to-unit-8"},"Welcome to Unit 8"),(0,i.kt)("p",null,"Building off of last unit, we are going to make requests to APIs in our web app.\nThis will let us spice up our project, and include more from the web."),(0,i.kt)("h2",{id:"unit-8-lecture-video"},"Unit 8 Lecture Video"),(0,i.kt)(o.Z,{src:"https://www.youtube.com/embed/wHWBw-lHdLM",mdxType:"Video"}),(0,i.kt)("p",null,"Only the 100 seconds, we won't be talking about how to build an API (around 2:30)"),(0,i.kt)(o.Z,{src:"https://www.youtube.com/embed/-MTSQjw5DrM",mdxType:"Video"}),(0,i.kt)(o.Z,{src:"https://www.youtube.com/embed/eIQh02xuVw4",mdxType:"Video"}),(0,i.kt)("h2",{id:"what-is-an-api"},"What is an API?"),(0,i.kt)("p",null,"API stands for (",(0,i.kt)("strong",{parentName:"p"},"A"),")pplication (",(0,i.kt)("strong",{parentName:"p"},"P"),")rogramming (",(0,i.kt)("strong",{parentName:"p"},"I"),")nterface.\nIt provides a structured way to communicate with an application by sending and receiving data."),(0,i.kt)("p",null,"When we go to a website (i.e. facebook.com).\nWe are making a request to Facebook's servers and are asking them to respond with some data.\nWhen you do this, your browser is interacting with Facebook's API to display some data. "),(0,i.kt)("p",null,"APIs are also used for programs to interact with each other.\nWe will be using APIs in our own website so that we can retrieve some data from the internet."),(0,i.kt)("h2",{id:"rest-api"},"REST API"),(0,i.kt)("p",null,"REST stands for Representational State Transfer, and is an architectural style for creating web services.\nREST treats each any data as a resource, that the client can fetch/edit/delete.\nWe specify these resources through URLs and then sending a ",(0,i.kt)("strong",{parentName:"p"},"request"),".\nThe server will then provide a ",(0,i.kt)("strong",{parentName:"p"},"response"),". "),(0,i.kt)("h3",{id:"http-methods"},"HTTP Methods"),(0,i.kt)("p",null,"With REST APIs we send HTTP Requests.\nEach of these requests has a method type, that usually correspond to what we want our request to do. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"GET")," - Getting a resource."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"POST")," - Creating and saving a new resource."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"PUT")," - Updating a resource."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"DELETE"),"  - Deleting a resource.")),(0,i.kt)("p",null,"Once we make a request, the server will give a response.\nMost times the response will be in ",(0,i.kt)("strong",{parentName:"p"},"JSON")," (JavaScript Object Notation).\nThis is the primary data format passed between APIs. "),(0,i.kt)("h3",{id:"an-example"},"An Example"),(0,i.kt)("p",null,"Let's do an example with the ",(0,i.kt)("a",{parentName:"p",href:"https://api.peterportal.org/"},"PeterPortal API"),".\nThis API was created by ICSSC and is in use by applications like AntAlmanac and Zotistics.\nIt provides data such as courses, instructors, grades, etc."),(0,i.kt)("p",null,"To make a request, we can use ",(0,i.kt)("a",{parentName:"p",href:"https://curl.se/"},"cURL")," in our shell.\ncURL lets us make an HTTP request in our shell.\nBy default cURL is making a GET request. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cURL https://api.peterportal.org/rest/v0/courses/COMPSCI161\n")),(0,i.kt)("p",null,"The output will look a little weird but after it's made pretty, it will look like this: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "COMPSCI161",\n    "department": "COMPSCI",\n    "number": "161",\n    "school": "Donald Bren School of Information and Computer Sciences",\n    "title": "Design and Analysis of Algorithms",\n    "course_level": "Upper Division (100-199)",\n    "department_alias": [\n        "CS"\n    ],\n    "units": [\n        4,\n        4\n    ],\n    "description": "Techniques for efficient algorithm design, including divide-and-conquer and dynamic programming, and time/space analysis. Fast algorithms for problems applicable to networks, computer games, and scientific computing, such as sorting, shortest paths, minimum spanning trees, network flow, and pattern matching.",\n    "department_name": "Computer Science",\n    ...\n}\n')),(0,i.kt)("p",null,"I've excluded some other fields here, but as you can see the request gives us more information on the requested resource.\nLet's break the URL down a little bit."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://api.peterportal.org"},(0,i.kt)("inlineCode",{parentName:"a"},"https://api.peterportal.org"))," - This means we want to make a request to this server. Your internet will use this to find the server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/rest/v0/courses/")," - When we find the server, what resource do we want. In our case we want a specific course."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"COMPSCI161")," - This is our parameter, we can change this to another course if we want a different course.")),(0,i.kt)("p",null,"How we know exactly what format to make our URL is usually specified in the API documentation.\nFor the PeterPortal API, we looked here for how to use the courses endpoint.\n",(0,i.kt)("a",{parentName:"p",href:"https://api.peterportal.org/REST-API/courses/"},"https://api.peterportal.org/REST-API/courses/")),(0,i.kt)("h3",{id:"http-status-codes"},"HTTP Status Codes"),(0,i.kt)("p",null,"In the above response we also received a status code of 200.\n200 indicates a successful request.\nThere are lots of different HTTP status codes, but the gist of it is this:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2xx - Success!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"4xx - You did something wrong")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"5xx - There is a problem with the server."),(0,i.kt)("p",{parentName:"li"},"For more specific status codes, you can read more ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"},"here"),". "))),(0,i.kt)("p",null,"If we made a request like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},"cURL https://api.peterportal.org/rest/v0/courses/NONEXISTENT121\n")),(0,i.kt)("p",null,"Our response will give us an error, indicating this course was not found."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "timestamp": "Tue, 15 Feb 2022 22:39:23 GMT",\n    "status": 404,\n    "error": "Bad Request: Invalid parameter",\n    "message": "Course not found"\n}\n')),(0,i.kt)("h3",{id:"url-encoding"},"URL Encoding"),(0,i.kt)("p",null,"When specifying parameters in URLs, you will need to URL Encode them, especially if there are any special characters.\nThis is because URLs usually use these special characters for other important notation. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Here the '&' was URL encoded to %26. \ncURL https://api.peterportal.org/rest/v0/courses/I%26CSCI33\n")),(0,i.kt)("p",null,"In JavaScript, we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"encodeURIComponent")," to URL encode our parameter strings. "),(0,i.kt)("h3",{id:"fetch"},"Fetch"),(0,i.kt)("p",null,"To make a request to an API in JavaScript, we use the fetch library. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install node-fetch\n")),(0,i.kt)("p",null,"Fetch is a function that takes 2 arguments. The url and a configuration object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'const url = "https://api.peterportal.org/rest/v0/courses/all";\nconst response = await fetch(url, {\n    "method": "GET"\n});\nconsole.log(response.json());\n')),(0,i.kt)("p",null,"Learn more about Fetch, in Mozilla documentation:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"},"Using the Fetch API - Web APIs | MDN")),(0,i.kt)("h2",{id:"graphql"},"GraphQL"),(0,i.kt)("h3",{id:"what-is-graphql"},"What is GraphQL?"),(0,i.kt)("p",null,"\ud83d\udca1 GraphQL is a query language for Web APIs. GraphQL itself is ",(0,i.kt)("em",{parentName:"p"},"not")," a tool or a framework, it is a ",(0,i.kt)("strong",{parentName:"p"},"language"),"."),(0,i.kt)("p",null,"Three cool features of GraphQL"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Get exactly what you ask for"),(0,i.kt)("li",{parentName:"ul"},"Get multiple resources in one request"),(0,i.kt)("li",{parentName:"ul"},"Type System to know what is possible")),(0,i.kt)("h3",{id:"why-graphql"},"Why GraphQL?"),(0,i.kt)("p",null,"Let's say you're consuming an API for a social media platform.\nWhat kind of data resources are you looking for?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Posts"),(0,i.kt)("li",{parentName:"ul"},"Pictures"),(0,i.kt)("li",{parentName:"ul"},"Likes"),(0,i.kt)("li",{parentName:"ul"},"Comments")),(0,i.kt)("p",null,"If you're familiar with REST, a REST API endpoints for this app may look like this:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/newsfeed")," \u2014> ","[post IDs]"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/post/{id}")," \u2014> picture ID, user ID, likes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/picture/{id}")," \u2014> picture data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/user/{id}/picture")," \u2014> commenter profile pic")),(0,i.kt)("h4",{id:"whats-the-problem-with-the-rest-approach"},"What's the problem with the REST approach?"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Too much data")),(0,i.kt)("p",null,"With REST, the fields I get from each endpoint cannot be changed.\nIf I just want to get the user who posted a post, the ",(0,i.kt)("inlineCode",{parentName:"p"},"/post/{id}")," endpoint returns more than just the user \u2014 it also returns the ",(0,i.kt)("inlineCode",{parentName:"p"},"picture ID")," and the number of ",(0,i.kt)("inlineCode",{parentName:"p"},"likes"),".\nI don't need all of that, and such inefficiency can be costly in the long run. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Complicated")),(0,i.kt)("p",null,"Certain use cases can lead to multiple, complicated requests to get the resources I want.\nLet's say I want to get the profile picture of every user who posted on the newsfeed. "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"/newsfeed")," I need to get all the ",(0,i.kt)("inlineCode",{parentName:"li"},"post ID")," from the newsfeed"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"/post/{id}")," I then need to get the ",(0,i.kt)("inlineCode",{parentName:"li"},"user ID")," of who made each post"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"/user/{id}/picture")," I then use the ",(0,i.kt)("inlineCode",{parentName:"li"},"user ID")," from each post to get the profile picture")),(0,i.kt)("p",null,"Now that's ",(0,i.kt)("em",{parentName:"p"},"complicated.")),(0,i.kt)("p",null,"Instead, we can use GraphQL! \ud83e\udd11"),(0,i.kt)("h3",{id:"scalability"},"Scalability"),(0,i.kt)("h4",{id:"dont-get-more-data-than-you-need"},"Don't get more data than you need"),(0,i.kt)("p",null,"With GraphQL, you ",(0,i.kt)("strong",{parentName:"p"},"get exactly what you need"),".\nIn each request, you can specify what fields are to be returned.\nIf you want to add another field later on, like a commenter's username, simply add it into the request!"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"GraphQL Query Example",src:a(9551).Z,width:"1924",height:"1001"})),(0,i.kt)("h4",{id:"simplified-usage"},"Simplified usage"),(0,i.kt)("p",null,"So we know that GraphQL puts all resources under one endpoint, but how does it do this and keep things simple?\nA ",(0,i.kt)("strong",{parentName:"p"},"type system")," defines the fields available in a type as well as a type's relationship with other types.\nSo if we get an overhead perspective, we can see that this is what puts the graph in GraphQL."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"GraphQL Types",src:a(3610).Z,width:"1321",height:"984"})),(0,i.kt)("h3",{id:"how-to-use-graphql"},"How to use GraphQL"),(0,i.kt)("p",null,"Like in REST, we can use the Fetch API to make a request.\nFirst, we define our URL, and our query.\nIn our query we specify what data we want, and which fields we want.\nUsually the documentation for the API will tell you the names of the fields. "),(0,i.kt)("p",null,"For the PeterPortal API, the documentation is found in its ",(0,i.kt)("a",{parentName:"p",href:"https://api.peterportal.org/graphql-playground"},"GraphQL Playground"),", under the ",(0,i.kt)("inlineCode",{parentName:"p"},"docs")," tab on the right.\nThe playground is usually in most GraphQL APIs that let you test out their queries. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'const url = "https://api.peterportal.org/graphql/";\n\nconst query = `\n    query {\n        course(id: "DANCE3"){\n            id\n            department\n            school\n            instructor_history {\n                ucinetid\n                department\n            }\n        }\n    }`;\n')),(0,i.kt)("p",null,"In this query, we are querying ",(0,i.kt)("inlineCode",{parentName:"p"},"course")," with the id ",(0,i.kt)("inlineCode",{parentName:"p"},"DANCE3"),".\nThe course query returns a Course type, that we specify what fields we want.\nOne of these is the ",(0,i.kt)("inlineCode",{parentName:"p"},"instructor_history")," which is an array of Instructor types.\nSince this is also a type, we need to give it some more fields of the Instructor type. "),(0,i.kt)("p",null,"In GraphQL, all requests are POST requests to the endpoint, ",(0,i.kt)("inlineCode",{parentName:"p"},"/graphql/"),".\nThe fetch function takes in two arguments.\nA URL is the first one, and the second one is options (we pass in as a JavaScript Object)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'const response = await fetch(url, {\n    "method": "POST",\n    "body": JSON.stringify({query}),\n    // Not necessary for every Web API, but it\'s good practice\n  "headers" : {\n      "Content-Type": "application/json",\n    }\n});\nconsole.log(response.json());\n')),(0,i.kt)("p",null,"GraphQL is super cool and an up and coming way of communicating with APIs.\nMore and more apps everywhere are using GraphQL, and it's definitely worth learning.\nThere is a lot more we can do with GraphQL, and this is only the beginning."),(0,i.kt)("h2",{id:"peterportal-api"},"PeterPortal API"),(0,i.kt)("p",null,"The PeterPortal API was created by ICSSC to encourage user development of projects to benefit UCI.\nIt includes data on Courses, Instructors, Grades and Schedule of Classes.\nIt is being used by our current projects including AntAlmanac, Zotistics, and even our newest project, PeterPortal. "),(0,i.kt)("p",null,"Check it out here: ",(0,i.kt)("a",{parentName:"p",href:"https://api.peterportal.org/"},"PeterPortal API Docs")),(0,i.kt)("h2",{id:"assignment"},"Assignment"),(0,i.kt)("p",null,"For the assignment this unit, we will be building off of last unit's project and make requests to the PeterPortal API to display some data!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Required Tasks")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Make a Request to the PeterPortal API REST Endpoint with Fetch"),(0,i.kt)("li",{parentName:"ul"},"Display the data from the REST API"),(0,i.kt)("li",{parentName:"ul"},"Make a request to the PeterPortal API GraphQL Endpoint"),(0,i.kt)("li",{parentName:"ul"},"Display data from GraphQL API"),(0,i.kt)("li",{parentName:"ul"},"Style the data you just added!")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Optional Stretch Goals")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use GraphQL to also display Instructor History and each of their names")),(0,i.kt)("h3",{id:"submission"},"Submission"),(0,i.kt)("p",null,"Complete the ",(0,i.kt)("a",{parentName:"p",href:"https://forms.gle/UpcXA8Bjmq3twZjt7"},"Google Form")),(0,i.kt)("iframe",{src:"https://docs.google.com/forms/d/e/1FAIpQLScmmAYnzx73FY9Xi1AUabbFqoThDAuJl3o8SSsx40MINLsH3A/viewform?embedded=true",width:"100%",height:"1400",frameborder:"0",marginheight:"0",marginwidth:"0"},"Loading\u2026"),(0,i.kt)("h1",{id:"external-resources"},"External Resources"),(0,i.kt)("p",null,"PeterPortal API"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://api.peterportal.org"},"api.peterportal.org")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://api.peterportal.org/REST-API/start_here/"},"REST API")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://api.peterportal.org/GraphQL-API/start_here/"},"GraphQL API"))),(0,i.kt)("p",null,"GraphQL"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://graphql.org/"},"https://graphql.org/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.howtographql.com/"},"https://www.howtographql.com/"))),(0,i.kt)("p",null,"Presentation Slides: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.google.com/presentation/d/1al4_dRwGblKJUJxYF9kolIX9QEUmZdAWXpak8svZpqI/edit?usp=sharing"},"API Slides")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.google.com/presentation/d/17qjgXJdK1ZNukdsAoUWJgGnm8wcOSrmir7f06y1BfrA/edit?usp=sharing"},"GraphQL Slides"))))}m.isMDXComponent=!0},9551:function(e,t,a){t.Z=a.p+"assets/images/graphql-query-22adaa361af5a8241db8a9d45860bc28.gif"},3610:function(e,t,a){t.Z=a.p+"assets/images/graphql-types-1a9d843ed7d6026a799c0ca0386bee0c.gif"}}]);